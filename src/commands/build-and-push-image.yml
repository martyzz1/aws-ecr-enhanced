description: >
  Based on circleci/aws-ecr.
  Load previously built image.
  Install AWS CLI, if needed, and configure. Log into Amazon ECR and push image
  to repository. Requires environment variables for AWS_ACCESS_KEY_ID and
  AWS_SECRET_ACCESS_KEY. We recommend these be saved in a Project
  (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project)
  or in Contexts (https://circleci.com/docs/2.0/contexts).
parameters:
  registry-id:
    type: env_var_name
    default: AWS_ECR_REGISTRY_ID
    description: >
      The 12 digit AWS id associated with the ECR account.
      This field is required
  aws-access-key-id:
    default: AWS_ACCESS_KEY_ID
    description: >
      AWS access key id for IAM role. Set this to the name of the environment
      variable you will set to hold this value, i.e. AWS_ACCESS_KEY.
    type: env_var_name
  aws-secret-access-key:
    default: AWS_SECRET_ACCESS_KEY
    description: >
      AWS secret key for IAM role. Set this to the name of the environment
      variable you will set to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
    type: env_var_name
  checkout:
    default: true
    description: |
      Boolean for whether or not to checkout as a first step. Default is true.
    type: boolean
  create-repo:
    default: false
    description: Should the repo be created if it does not exist?
    type: boolean
  dockerfile:
    default: Dockerfile
    description: Name of dockerfile to use. Defaults to Dockerfile.
    type: string
  docker-login:
    default: false
    description: |
      Enable dockerhub authentication. Defaults to false.
    type: boolean
  dockerhub-password:
    default: DOCKERHUB_PASSWORD
    description: >
      Dockerhub password to be configured. Set this to the name of the
      environment variable you will set to hold this value, i.e.
      DOCKERHUB_PASSWORD.
    type: env_var_name
  dockerhub-username:
    default: DOCKERHUB_USERNAME
    description: >
      Dockerhub username to be configured. Set this to the name of the
      environment variable you will set to hold this value, i.e.
      DOCKERHUB_USERNAME.
    type: env_var_name
  ecr-login:
    default: false
    description: >
      Boolean for whether or not to log in to ECR before building. Default is
      false.
    type: boolean
  env-var-file:
    default: '/tmp/workspace/custom-env-vars'
    description: >-
      Path to a custom env var file which will be passed to >> $BASH_ENV
      Ideal for passing environment variables from earlier jobs
      Most useful for Image tagging
      Defaults to '/tmp/workspace/custom-env-vars'.
    type: string
  extra-build-args:
    default: ''
    description: >
      Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build
    type: string
  image-file:
    default: '/tmp/workspace/image.tar'
    description: >-
      Path to your image.tar file.
      Defaults to '/tmp/workspace/image.tar'.
    type: string
  no-output-timeout:
    default: 10m
    description: The amount of time to allow the docker command to run before timing out.
    type: string
  path:
    default: .
    description: >-
      Path to the directory containing your Dockerfile and build context.
      Defaults to . (working directory).
    type: string
  profile-name:
    default: default
    description: AWS profile name to be configured.
    type: string
  region:
    type: string
    default: ${AWS_REGION}
    description: >
      AWS region of ECR repository. Defaults to environment variable ${AWS_REGION}
  remote-docker-layer-caching:
    default: false
    description: >
      Enable Docker layer caching if using remote Docker engine. Defaults to
      false.
    type: boolean
  repo:
    description: Name of an Amazon ECR repository
    type: string
  repo-scan-on-push:
    default: true
    description: Should the created repo be security scanned on push?
    type: boolean
  skip-when-tags-exist:
    default: false
    description: Whether to skip image building if all specified tags already exist in ECR
    type: boolean
  tag:
    default: latest
    description: >-
      A comma-separated string containing docker image tags to build and push
      (default = latest)
    type: string
steps:
  - aws-ecr/ecr-login:
      profile-name: <<parameters.profile-name>>
      region: <<parameters.region>>
      registry-id: <<parameters.registry-id>>
  - when:
      condition: <<parameters.create-repo>>
      steps:
        - aws-ecr/create-repo:
            profile-name: <<parameters.profile-name>>
            region: <<parameters.region>>
            # do this to get around the trunomi/repo-name bug because nobody uses bloody quotes
            repo: <<parameters.repo>>
            repo-scan-on-push: <<parameters.repo-scan-on-push>>
  - when:
      condition: <<parameters.docker-login>>
      steps:
        - run: >
            docker login -u $<<parameters.dockerhub-username>> -p
            $<<parameters.dockerhub-password>>
  -  build-image-with-local-tags:
      dockerfile: <<parameters.dockerfile>>
      ecr-login: <<parameters.ecr-login>>
      extra-build-args: <<parameters.extra-build-args>>
      no-output-timeout: <<parameters.no-output-timeout>>
      path: <<parameters.path>>
      profile-name: <<parameters.profile-name>>
      region: <<parameters.region>>
      repo: <<parameters.repo>>
      skip-when-tags-exist: <<parameters.skip-when-tags-exist>>
      tag: <<parameters.tag>>
  - tag-image-for-ecr:
      repo: <<parameters.repo>>
      tag: <<parameters.tag>>
      region: <<parameters.region>>
      registry-id: <<parameters.registry-id>>
  - aws-ecr/push-image:
      repo: <<parameters.repo>>
      registry-id: <<parameters.registry-id>>
      region: <<parameters.region>>
      tag: <<parameters.tag>>
