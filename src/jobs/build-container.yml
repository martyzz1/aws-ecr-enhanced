description: >
  Install AWS CLI, if needed, and configure. Log into Amazon ECR
  and push a tarred local image to a repository. Requires environment variables
  for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. We recommend
  these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project)
  or in Contexts (https://circleci.com/docs/2.0/contexts).
# executor: <<parameters.executor>>
parameters:
  account-url:
    default: AWS_ECR_ACCOUNT_URL
    description: >
      Env var storing Amazon ECR account URL that maps to an AWS account, e.g.
      {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com defaults to
      AWS_ECR_ACCOUNT_URL
    type: env_var_name
  attach-workspace:
    type: boolean
    default: false
    description: >
      Boolean for whether or not to attach to an existing workspace. Default
      is false.

  aws-access-key-id:
    default: AWS_ACCESS_KEY_ID
    description: >
      AWS access key id for IAM role. Set this to the name of the environment
      variable you will set to hold this value, i.e. AWS_ACCESS_KEY.
    type: env_var_name
  aws-secret-access-key:
    default: AWS_SECRET_ACCESS_KEY
    description: >
      AWS secret key for IAM role. Set this to the name of the environment
      variable you will set to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
    type: env_var_name
  checkout:
    default: true
    description: |
      Boolean for whether or not to checkout as a first step. Default is true.
    type: boolean
  dockerfile:
    default: Dockerfile
    description: Name of dockerfile to use. Defaults to Dockerfile.
    type: string
  dockerhub-password:
    default: DOCKERHUB_PASSWORD
    description: >
      Dockerhub password to be configured. Set this to the name of the
      environment variable you will set to hold this value, i.e.
      DOCKERHUB_PASSWORD.
    type: env_var_name
  dockerhub-username:
    default: DOCKERHUB_USERNAME
    description: >
      Dockerhub username to be configured. Set this to the name of the
      environment variable you will set to hold this value, i.e.
      DOCKERHUB_USERNAME.
    type: env_var_name
  ecr-login:
    default: false
    description: >
      Boolean for whether or not to log in to ECR before building. Default is
      false.
    type: boolean
  env-var-file:
    default: 'custom-env-vars'
    description: >-
      name of a custom env var file which will be passed to >> $BASH_ENV
      Ideal for passing environment variables from earlier jobs
      Most useful for Image tagging
      Defaults to 'custom-env-vars'.
    type: string
  executor:
     type: executor
     default: default
     description: executor to use for this job
  extra-build-args:
    type: string
    default: ""
    description: >
      Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build
  image-file:
    default: '/tmp/workspace/image.tar'
    description: >-
      Path to your image.tar file.
      Defaults to '/tmp/workspace/image.tar'.
    type: string
  path:
    type: string
    default: .
    description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).

  no-output-timeout:
    type: string
    default: "10m"
    description: >
      The amount of time to allow the docker build command to run before timing out (default is `10m`)
  profile-name:
    default: default
    description: AWS profile name to be configured.
    type: string
  region:
    default: AWS_REGION
    description: >
      Name of env var storing your AWS region information, defaults to
      AWS_REGION
    type: env_var_name
  repo:
    description: Name of an Amazon ECR repository
    type: string
  repo-scan-on-push:
    default: true
    description: Should the created repo be security scanned on push?
    type: boolean
  skip-when-tags-exist:
    type: boolean
    default: false
    description: Whether to skip image building if all specified tags already exist in ECR
  store-image-as-artifact:
    default: false
    description: |
      Option to store the built image as an artifact.
      Defaults to false
    type: boolean
  tag:
    default: latest
    description: >-
      A comma-separated string containing docker image tags to build and push
      (default = latest)
    type: string
  workspace-root:
    type: string
    default: "."
    description: >
      Workspace root path that is either an absolute path or a path relative
      to the working directory. Defaults to '.' (the working directory)
executor: <<parameters.executor>>
# docker:
#   - image: cimg/base:2022.03
steps:
  - when:
      condition: <<parameters.checkout>>
      steps:
        - checkout
  - when:
      condition: <<parameters.attach-workspace>>
      steps:
        - attach_workspace:
            at: <<parameters.workspace-root>>
        - restore-custom-env-var:
            env-var-file: <<parameters.workspace-root>>/<<parameters.env-var-file>>
  # - when:
  #     condition: <<parameters.setup-remote-docker>>
  #     steps:
  #       - setup_remote_docker:
  #           docker_layer_caching: <<parameters.remote-docker-layer-caching>>
  #           version: <<parameters.remote-docker-version>>
  # - checkout
  # - run:
  #     name: "Persist CIRCLE_BUILD_NUM environment variables"
  #     command: |
  #       echo "export FULL_IMAGE_TAG='${IMAGE_TAG}.${CIRCLE_BUILD_NUM}'" >> new-env-vars
  #       cat new-env-vars >> $BASH_ENV
  # - setup_remote_docker:
  #     version: 19.03.13
  #     docker_layer_caching: true
  -  build-image-with-local-tags:
      account-url: <<parameters.account-url>>
      aws-access-key-id: <<parameters.aws-access-key-id>>
      aws-secret-access-key: <<parameters.aws-secret-access-key>>
      dockerfile: <<parameters.dockerfile>>
      ecr-login: <<parameters.ecr-login>>
      extra-build-args: <<parameters.extra-build-args>>
      no-output-timeout: <<parameters.no-output-timeout>>
      path: <<parameters.path>>
      profile-name: <<parameters.profile-name>>
      region: <<parameters.region>>
      repo: <<parameters.repo>>
      skip-when-tags-exist: <<parameters.skip-when-tags-exist>>
      tag: <<parameters.tag>>

  -  save-image-with-local-tags:
      repo: <<parameters.repo>>
      image-file: <<parameters.image-file>>
      tag: <<parameters.tag>>
  - persist_to_workspace:
      root: .
      paths:
        - <<parameters.image-file>>
        # - new-env-vars
  - when:
      condition: <<parameters.store-image-as-artifact>>
      steps:
        - store_artifacts:
            path: <<parameters.image-file>>
            destination: <<parameters.repo>>
